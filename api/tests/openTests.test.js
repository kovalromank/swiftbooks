const request = require('supertest');
const app = require('../src/app'); 
const booklistModel = require('../src/models/booklistModel');



















/*
describe('Get list reviews', () => {

    it('Fail due to missing list_id param', async () => {  

        const response = await request(app)
            .get('/api/open/get-reviews-for-list');

        expect(response.statusCode).toBe(401);
        expect(response.body.message).toEqual(expect.stringMatching(/list id not/i));
    });


    it('Succesfully get empty object (no reviews) as a public user', async () => {  

        const response = await request(app)
            .get('/api/open/get-reviews-for-list')
            .query({
                list_id: 1
            });

        expect(response.statusCode).toBe(200);
    });


    it('Succesfully get reviews as public user (dont get hidden ones)', async () => {  

        const response = await request(app)
            .get('/api/open/get-reviews-for-list')
            .query({
                list_id: 2
            });

        expect(response.statusCode).toBe(200);
    });


    // Log in before running the tests
    let token;
    beforeAll(async () => {
        const loginResponse = await request(app)
            .post('/api/auth/login')
            .send({
                email: 'user2@example.com', //managaer
                password: 'password'
            });

        token = loginResponse.body.token; 
    });


    it('Succesfully get reviews as manager user (get hidden ones)', async () => {  

        const response = await request(app)
            .get('/api/open/get-reviews-for-list')
            .set('Authorization', `Bearer ${token}`)
            .query({
                list_id: 2
            });

        expect(response.statusCode).toBe(200);
    });


});*/